<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>https-fsan-github-io</title>
    <link>//fsan.github.io/</link>
    <description>Recent content on https-fsan-github-io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2020</copyright>
    <lastBuildDate>Sun, 26 Jan 2020 13:56:09 -0300</lastBuildDate>
    
	<atom:link href="//fsan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Emscripten and WebAssembly</title>
      <link>//fsan.github.io/post/emscripten_and_webassembly/</link>
      <pubDate>Sun, 26 Jan 2020 13:56:09 -0300</pubDate>
      
      <guid>//fsan.github.io/post/emscripten_and_webassembly/</guid>
      <description>WebAssembly  
WebAssembly is now supported on major browsers and enables a higher performance than processing power due to its low-level binary executed at client-side.
WebAssemly uses modules as the distributable, loadable, and executable unit of code. Multiple module instances can access the same shared state which is the basis for dynamic linking in WebAssembly (source).
Emscripten is a toolchain for compiling to asm.js and WebAssembly, built using LLVM, that lets you run C and C++ on the web at near-native speed without plugins (source).</description>
    </item>
    
    <item>
      <title>PypeRaptor</title>
      <link>//fsan.github.io/post/pyperaptor/</link>
      <pubDate>Sat, 11 Jan 2020 14:22:46 -0300</pubDate>
      
      <guid>//fsan.github.io/post/pyperaptor/</guid>
      <description>PypeRaptor is a Python3 library that provides a quick way of building pipelines from multithreaded processing withsome concurrency control.
TLDR;  Install pyperaptor Create Pipeline object Create Node(s) object(s) containing the function to be executed. Lock the Pipeline Execute the pipeline  Installation
pip3 install pyperaptor Code
my_steps = [ ... ] p = Pipeline(my_steps, parallel=True, workers=10) p.lock() results = p.process(my_input_generator) Example      Introduction</description>
    </item>
    
  </channel>
</rss>